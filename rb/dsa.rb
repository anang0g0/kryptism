#! /usr/local/bin/ruby
# /root/ruby-1.6.7/sample/dsa.rb
# Created: April 2,2003
# Author: tcshacina
# $Id: dsa.rb,v 0.9 2003/04/02
# usage: ruby dsa.rb [file]
# hint: Digital Signatures Based on the Discrete Logarithm Problem from Switzerland & RFC2409

def M32(x) (((1 << 32)-1)&(x)) end

@s_r=0
@s_s=0
@a_r=0
@a_s=0
@Pub_key=0
@KEYDEF=0
@KEYDEF2=0
@GROUP_GENERATOR=0
@K=0

class String
  def sha1hex
    SHA1.new(self).hexdigest
  end
end

# close ‚µ‚½‚¢‚¾‚¯ close ‚µ‚È‚­‚Ä‚à‚¢‚¢‚©‚È
# File.open(filename).read ‚Å‘ã—p‰»
def fileread(file)
  f = File.open(file)
  str = f.read
  f.close
  str
end

def usage
  STDERR.puts "usage: #{$0} [OPTION] [FILE]...
  -t, -v      check SHA1 sums against given list
      --status     do not output anything, status code shows success"
  exit 1
end

opt_check = false
opt_status = false

while ARGV[0] =~ /^-/
  $_ = ARGV.shift
  if ~/^-c/ or ~/^--check/
    opt_check = true
  elsif ~/^--status/
    opt_status = true
  else
    usage
  end
end

if opt_status == true and opt_check == false
  STDERR.puts "#{$0}: the --status option is meaningful only when verifying checksums(--check)"
  exit 1
end

require 'sha1'

if opt_check
  ck_count_total = 0
  ck_count_failed = 0
end

while file_str = gets(nil)
  if opt_check
    file_str.split("\n").each do |l|
      ck_count_total += 1
      sum1, fname = l.split
      sum2 = fileread(fname).shahex
      status = if sum1 == sum2
                 'OK'
               else
                 ck_count_failed += 1
                 'FAILED'
               end
      if opt_status
      else
        puts fname + ': ' + status
      end
    end
  else
    puts file_str.sha1hex + '  ' + ARGF.filename
    STATUS= file_str.sha1hex
  end
end

if opt_check and ck_count_failed > 0
  if opt_status
  else
    STDERR.puts "#{$0}: WARNING: #{ck_count_failed} of #{ck_count_total} computed checksum did NOT match"
  end
  exit 1
end


#from RFC2409
#dsa.rb Ruby version
#@GROUP_GENERATOR=2

# Default modulus value by zebedee
@DFLT_MODULUS=0xf488fd584e49dbcd20b49de49107366b336c380d451d0f7c88b31c7c5b2d8ef6f3c923c043f0a55b188d8ebb558cb85d38d334fd7c175743a31d186cde33212cb52aff3ce1b1294018118d7c84a70a72d686c40319c807297aca950cd9969fabd00a509b0246d3083d66a45d419f9c7cbd894b221926baaba25ec355e92f78c7


=begin
#...If you want to abandon man-in-the-middle-attack you must exchange
#a Public key with it's own signature on DH key exchange.
#Here is a signature method NR & DSA with blind.
=end


# GCD
def gcd(xx, yy)
  
  while (yy != 0) 
    tt = xx % yy
    xx = yy
    yy = tt
  end

  return xx

end


# invert of integer
def inv(a, n)
  
  d = n
  x = 0
  s = 1
  while (a != 0)
    q = d / a
    r = d % a
    d = a
    a = r
    t = x - q * s
    x = s
    s = t
  end
  gcd = d  # $\gcd(a, n)$ 

  return ((x + n) % (n / d))
end


#jj=aa^bb mod oo
def exp(aa, bb, oo)

  ii=oo
  j=0
  jj=0
  kk=[2**12] #prime is 4096 bit table
  c=[2**13]  #mod is 8192 bit table
  count=0

  for i in 0..4096
    kk[i]=0
  end
  while(ii>0)
	ii = (ii>>1)
	j=j+1
  end


  kk[0]=aa

#  print j,"\n"
  
#ex.1000=2**3+2**5+2**6+2**7+2**8+2**9 makes a array c=[3,5,6,7,8,9]
    for i in 0..j
      if (((bb^(1<<i))>>i)%2 == 0) # testbit(bb,i)
	c[count]=i
	count=count+1
      end
    end
#    print count,"\n"

    for i in 1..(c[count-1]+1)
      kk[i] = kk[i-1]*kk[i-1]%oo
    end

    jj=1
    for i in 0..count-1
      jj=kk[c[i]]*jj%oo
      if (jj==0)
#	print i,"\n"
      end
    end

    return jj
end


# p>q=(p-1)/2 
def dsa(m, s56)

  #k is select atrandom
  if((@KEYDEF-1)%@K==0)
    print "bad k\n"
    exit()
  end
  rr=exp(@GROUP_GENERATOR,@K,@KEYDEF)
  @a_r = rr % @KEYDEF2
  print "r=", @a_r,"\n"
  @a_s=(@K*m+s56*@a_r)%@KEYDEF2;
  print "s=", @a_s,"\n"

end


# verify DSA signature
def vera(a_r, a_s, m)

  #  m=sha(argc,argv);
  tt=exp(@GROUP_GENERATOR,@a_s,@KEYDEF) # g^{(km+xr)%mod}=g^km*g^xr
  q=exp(@Pub_key,@a_r,@KEYDEF) # g^{r*x}
  q=inv(q,@KEYDEF) # g^{-xr}
  tt=tt*q%@KEYDEF # g^{(km+xr)%mod-xr}
  m=inv(m,@KEYDEF2)
  tt=exp(tt,m,@KEYDEF) # g^k
  v=tt%@KEYDEF2

  if(@a_r!=v)
    print "baka\n"
  end
  if(@a_r==v)
    print "That's True!\n"
  end
end


# message recovery signature
def nr(x, m)

 # select random
  k=108765490876958746235423%@KEYDEF2
  r=m*exp(@GROUP_GENERATOR,k,@KEYDEF)%@KEYDEF
  print "NR-Signature is r=" ,r ,"\n"
  s=(x*r+k)%@KEYDEF2;
  print "s=",s ,"\n"
  @s_r=r;
  @s_s=s;

#  return S;
end


def vnr(s_r, s_s, m)

  y=inv(exp(@GROUP_GENERATOR,@s_s,@KEYDEF),@KEYDEF)
  #  cout << "y=" << Itoa(y,16) << endl;
  ee=exp(@Pub_key,@s_r,@KEYDEF)
  #  cout << "E=" << E << endl;
  mm=y*ee*@s_r%@KEYDEF;

  if(m==mm)
    print "That's True!\n"
  end
end


def elgamal(mm, hh, mod)

  r=888888

  cc=exp(@GROUP_GENERATOR,r,mod)
  dd=exp(hh,r,mod)*mm
  @Cyp_cc=cc
  @Cyp_dd=dd
#  print "(",cc,"," , dd , ")" ,"\n"

end

#cyphertext to plaintext
def decode(cc, dd, x, mod)

  plain=dd*inv(exp(cc,x,mod),mod)%mod

  return plain

end


def main(u)
 
# decide keysize n
  n=1024
  print "n=",n,"\n"

 if (n != 768 && n!= 1024 && n!=1536 && n!=2048 && n!=3072 && n!=4096 && n!=6144 && n != 8192)
   print "You can select from next parametors 768,1024,1536,2048\n"
   print "3072 4096 6144 8192. First [./dsa file] Next you need to input\n"
   print "one of these dsa key size.\n"
   print "Note this version's signature is not secure because of \n"
 end
 if (n==768)
 xx=1552518092300708935130918131258481755631334049434514313202351194902966239949102107258669453876591642442910007680288864229150803718918046342632727613031282983744380820890196288509170691316593175367469551763119843371637221007210577919
 end

 if (n==1024)
 xx=179769313486231590770839156793787453197860296048756011706444423684197180216158519368947833795864925541502180565485980503646440548199239100050792877003355816639229553136239076508735759914822574862575007425302077447712589550957937778424442426617334727629299387668709205606050270810842907692932019128194467627007
 end

# 1536-bitMODPGroup
 if (n==1536)
 xx=2410312426921032588552076022197566074856950548502459942654116941958108831682612228890093858261341614673227141477904012196503648957050582631942730706805009223062734745341073406696246014589361659774041027169249453200378729434170325843778659198143763193776859869524088940195577346119843545301547043747207749969763750084308926339295559968882457872412993810129130294592999947926365264059284647209730384947211681434464714438488520940127459844288859336526896320919633919
   end

# 2048-bitMODPGroup
 if (n==2048)
xx=32317006071311007300338913926423828248817941241140239112842009751400741706634354222619689417363569347117901737909704191754605873209195028853758986185622153212175412514901774520270235796078236248884246189477587641105928646099411723245426622522193230540919037680524235519125679715870117001058055877651038861847280257976054903569732561526167081339361799541336476559160368317896729073178384589680639671900977202194168647225871031411336429319536193471636533209717077448227988588565369208645296636077250268955505928362751121174096972998068410554359584866583291642136218231078990999448652468262416972035911852507045361090559
   end

# 3072-bitMODPGroup
 if (n==3072)
 xx=5809605995369958062791915965639201402176612226902900533702900882779736177890990861472094774477339581147373410185646378328043729800750470098210924487866935059164371588168047540943981644516632755067501626434556398193186628990071248660819361205119793693985433297036118232914410171876807536457391277857011849897410207519105333355801121109356897459426271845471397952675959440793493071628394122780510124618488232602464649876850458861245784240929258426287699705312584509625419513463605155428017165714465363094021609290561084025893662561222573202082865797821865270991145082200656978177192827024538990239969175546190770645685893438011714430426409338676314743571154537142031573004276428701433036381801705308659830751190352946025482059931306571004727362479688415574702596946457770284148435989129632853918392117997472632693078113129886487399347796982772784615865232621289656944284216824611318709764535152507354116344703769998514148343807
   end

# 4096-bitMODPGroup 
 if (n==4096)
 xx
   end

# 7.  6144-bit MODP Group 
 if (n==6144)
 xx
   end

#This prime is: 2^6144 - 2^6080 - 1 + 2^64 * { [2^6014 pi] + 929484 end
#Its hexadecimal value is
#The generator is: 2.


#  8192-bit MODP Group 
 if (n==8192)
  xx
   end

# default: print "Choose your key size","\n"

#This prime is: 2^8192 - 2^8128 - 1 + 2^64 * { [2^8062 pi] + 4743158 end
#Its hexadecimal value is
#The generator is: 2.


 #@KEYDEF=101459693097608319042758415833807677670847628544715540724500026735349301068515392099767184641851031376113522183648115338953972239406909609350543459251533166139494901562515248706419170211273185584865994044063658192209029166200554581462882695234974056443041025544008790901161520035530940963382832098363453248929
#@KEYDEF=101459693097608319042758415833807677670847628544715540724500026735349301068515392099767184641851031376113522183648115338953972239406909609350543459251533166139494901562515248706419170211273185584865994044063658192209029166200554581462882695234974056443041025679098587842607769880130803257635362098004642676067
#@KEYDEF=101459693097608319042758415833807677670847628544715540724500026735349301068515392099767184641851031376113522183648115338953972239406909609350543459251533166139494901562515248706419170211273185584865994044063658192209029166200554581462882695234974056443041026219457775608392769258530252434645482096569400384619
#@KEYDEF=101459693097608319042758415833807677670847628544715540724500026735349301068515392099767184641851031376113522183648115338953972239406909609350543459251533166139494901562515248706419170211273185584865994044063658192209029166200554581462882695234974056443041027399552553487693342613655486269495169449756802276859
#@KEYDEF=101459693097608319042758415833807677670847628544715540724500026735349301068515392099767184641851031376113522183648115338953972239406909609350543459251533166139494901562515248706419170211273185584865994044063658192209029166200554581462882695234974056443041027450793510948241920140917503001797853242724149990601
#@KEYDEF=101459693097608319042758415833807677670847628544715540724500026735349301068515392099767184641851031376113522183648115338953972239406909609350543459251533166139494901562515248706419170211273185584865994044063658192209029166200554581462882695234974056443041028084318075915024333205247891692085580137593176269593
 #@KEYDEF=101459693097608319042758415833807677670847628544715540724500026735349301068515392099767184641851031376113522183648115338953972239406909609350543459251533166139494901562515248706419170211273185584865994044063658192209029166200554581462882695234974056443041028130900764515523040048213361448724383585745310554813
 #@KEYDEF=101459693097608319042758415833807677670847628544715540724500026735349301068515392099767184641851031376113522183648115338953972239406909609350543459251533166139494901562515248706419170211273185584865994044063658192209029166200554581462882695234974056443041028633993801400909073952240434820423460825788360835189
 @KEYDEF=101459693097608319042758415833807677670847628544715540724500026735349301068515392099767184641851031376113522183648115338953972239406909609350543459251533166139494901562515248706419170211273185584865994044063658192209029166200554581462882695234974056443041028708526103161707004900985186431045546342831775691541
 # diviser */
 @KEYDEF2=776378143341645114049424495943980057469202238087

 # SGP */
 # KEYDEF=97788888745463540643262548300201729806525391476402282848706169459770396492073602039095514523473374359988681947091292005523954797054767192116656100785666440095118928776457296943893523018715336260541244217091990481817677778985476605556762672349505655657810698817901064639971684815509507764394425018715419966376587",10);
 #   KEYDEF=97788888745463540643262548300201729806525391476402282848706169459770396492073602039095514523473374359988681947091292005523954797054767192116656100785666440095118928776457296943893523018715336260541244217091990481817677778985476605556762672349505655657810698817901064639971684815509507764394425018715419966382467
 #    KEYDEF2=(KEYDEF-1)/2;

  # choose random secret keys (larger than s56-bit)
  s56=72057593970819135
  s64=9223389611877711887

  s128=340282055605427970793192457633571187455
  s168=373779281620604392915322569464050882390986703503105

  gay=3618502788666131106986593281527206111185510860325500770110842981586944655359

# k is secret number which is sender choosed atrandom
  @K=22387645283764583276458327645823764528376458327645832764528376452837645238764528376453287645


=begin
 @KEYDEF=X;
 @KEYDEF2=(X-1)/2;
=end
 @GROUP_GENERATOR=exp(s56,(@KEYDEF-1)/@KEYDEF2,@KEYDEF)
    if((@KEYDEF-1)%@KEYDEF2!=0)
      exit()
    end
  yy= exp(@GROUP_GENERATOR,s56,@KEYDEF) #Public Key
  @Pub_key=yy
#  e = sha1(argc,argv);
  e= ("0x"+STATUS).hex

  print ARGF.filename , "'s DSA Signature is "
  dsa(e,s56)
  vera(@a_r,@a_s,e)

  nr(s56,e)
  vnr(@s_r,@s_s,e)

end


#e=DFLT_MODULUS*DFLT_MODULUS
#print "e=", e, "\n"

main(ARGV[0].to_i)
